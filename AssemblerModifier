#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#define STRSIZE 80
#define STRNUM 300
typedef char STR[STRSIZE];
typedef STR STRARRY[STRNUM];

STRARRY acommands;
STRARRY asmarr;

FILE* fp;
STR line1, line2, temp, command, addstr, jmpstr, jmpcode, deststr, destcode, compstr, compcode;
int commandsCounter, variableCounter, symbolsCounter;

STRARRY destdict = { "", "M=", "D=", "MD=", "A=", "AM=", "AD=", "AMD=" };
STRARRY destcodes = { "000","001","010","011", "100","101","110","111" };

STRARRY jmpdict = { "", ";JGT", ";JEQ", ";JGE", ";JLT", ";JNE", ";JLE", ";JMP" };
STRARRY jmpcodes = { "000","001","010","011", "100","101","110","111" };

STRARRY compdict = { "0", "1", "-1", "D", "A", "M", "!D", "!A","!M", "-D", "-A", "-M", "D+1", "A+1", "M+1", "D-1", "A-1","M-1", "D+A", "D+M", "D-A", "D-M", "A-D", "M-D", "D&A","D&M", "D|A", "D|M", "M+D", "M+A" };
STRARRY compcodes = { "0101010","0111111","0111010","0001100", "0110000","1110000","0001101","0110001", "1110001", "0001111","0110011","1110011","0011111","0110111", "1110111","0001110","0110010","1110010","0000010","1000010","0010011","1010011", "0000111","1000111","00000000","1000000","0010101","1010101","1000010","0000010" };

STRARRY symbolsdict = { "SP", "LCL", "ARG", "THIS", "THAT", "SCREEN", "KBD", "R0", "R1", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15" };
int symbolscodes[STRNUM] = { 0, 1, 2, 3, 4,16384,24576,0,1, 1, 2, 3, 4, 5, 6,7,8, 9, 10, 11, 12, 13, 14, 15 };

int is_label_symbol(char str[], char dest[]);
int is_assign_command(STR str, STR dest, STR src);
int is_new_variable(STRARRY asmarr, char command[]);
int is_jmp_command(char acommand[], char command[]);
void encode(STRARRY dictarr, STRARRY codearr, STR src, STR dest);
int is_command(char str[], char dest[]);
void convert_int_to_bin_string(int x, STR astring);
void reset();

int main(int argc, char* argv[])
{
    int i, j, flag;
    STR newfilename, str;
    strcpy(newfilename, "Mult.asm.hack");
    if(argc < 2) {
        fprintf(stderr, "Usage: assembler filename\n");
        return 0;
    }
    fp = fopen(argv[1], "rt");
    if (fp == NULL) {
        perror("fopen");
        exit(0);
    }
    commandsCounter = 0;
    variableCounter = 0;
    symbolsCounter = 0;
    //transferring all the commands lines to the acommand array.
    while (fgets(line2, STRSIZE, fp) != NULL)
    {
        if (line2[strlen(line2) - 1] == '\n')
            line2[strlen(line2) - 1] = '\0';
        if (is_command(line2, line1) == 1) //if it is a command: put the command in line
        {
            strcpy(acommands[commandsCounter], line1);
            commandsCounter++;
        }
    }
    fclose(fp);
    fp = fopen(newfilename, "wt");
    if (fp == NULL) {
        perror("fopen");
        exit(0);
    }
    symbolsCounter = 24; //the next element on the symbol dictionary.
    /*--- first run - only labels ---*/
    for (i = 0; i < commandsCounter; i++) //commandsCounter is the total amount of commands in the program.
    {
        if (is_label_symbol(acommands[i], symbolsdict[symbolsCounter]) == 1)
        {
            symbolscodes[symbolsCounter] = i + (24 - symbolsCounter); //the label code is the next line number
            symbolsCounter++;
        }
    }

    /*--- second run - all lines ---*/
    for (i = 0; i < commandsCounter; i++)
    {
        reset();
        //if it is a label: continue.
        if ((acommands[i])[0] == '(')
        {
            continue;
        }

        //if it is a variable or an existed label
        //must check if the @name is a label. if it is, convert it matching code in the symbolscodes array.
        //otherwise, consider it as a variable.
        else if ((acommands[i])[0] == '@') 
        {
            flag = 0;
            for (j = 1; j < strlen(acommands[i]); j++) //copying the command without @
                temp[j - 1] = (acommands[i])[j];
            temp[j - 1] = '\0';
            for (j = 0; j < symbolsCounter; j++) //checking if it is a label
            {
                if (strcmp(symbolsdict[j], temp) == 0) //if it is a label
                {
                    convert_int_to_bin_string(symbolscodes[j], str);
                    flag = 1;
                    break;
                }
            }
            if (flag == 1) //if it was a label.
                ;
            else if (temp[0] >= '0' && temp[0] <= '9')
                convert_int_to_bin_string(atoi(temp), str);
            else if (is_new_variable(asmarr, temp) == 1) //if it is a new variable
                convert_int_to_bin_string(variableCounter - 1 + 16, str);
            else //if it's already in the variable array (asmarr)
            {
                for (j = 0; j < variableCounter; j++)
                {
                    if (strcmp(temp, asmarr[j]) == 0)
                    {
                        convert_int_to_bin_string(j + 16, str);
                        break;
                    }
                }
            }
            command[0] = '0';
            command[1] = '\0';
            strcat(command, str); //now str has the full a command (16 bit).
            fprintf(fp, "%s\n", command);
        }

        //if it is a jump command
        else if (is_jmp_command(acommands[i], jmpstr) == 1)
        {
            strcpy(command, "111");
            encode(compdict, compcodes, compstr, compcode);
            strcat(command, compcode);
            encode(destdict, destcodes, deststr, destcode);
            strcat(command, destcode);
            encode(jmpdict, jmpcodes, jmpstr, jmpcode);
            strcat(command, jmpcode);
            command[16] = '\0';
            fprintf(fp, "%s\n", command);
        }

        //if it is an assign command (jump = null)
        else if (is_assign_command(acommands[i], deststr, compstr) == 1)
        {
            strcpy(command, "111");
            encode(compdict, compcodes, compstr, compcode);
            strcat(command, compcode);
            encode(destdict, destcodes, deststr, destcode);
            strcat(command, destcode);
            strcpy(jmpstr, ""); //jump = null
            encode(jmpdict, jmpcodes, jmpstr, jmpcode);
            strcat(command, jmpcode);
            command[16] = '\0';
            fprintf(fp, "%s\n", command);
        }
    }
    fclose(fp);
    return 0;
}

//The function resets all the strings.
void reset()
{
    memset(destcode, 0, sizeof(STR));
    memset(deststr, 0, sizeof(STR));
    memset(compcode, 0, sizeof(STR));
    memset(compstr, 0, sizeof(STR));
    memset(jmpcode, 0, sizeof(STR));
    memset(jmpstr, 0, sizeof(STR));
    memset(command, 0, sizeof(STR));
    memset(temp, 0, sizeof(char));
}

//The function checks if the given string is a valid command.
//If it is: returns 1 and copies the command to dest. otherwise returns 0.
int is_command(char str[], char dest[])
{
    int flag;
    int len;
    char* strptr, * destptr;
    STR  symbol;
    len = strlen(str);
    strptr = str;
    destptr = dest;
    while (isspace(*strptr) && (*strptr != '\0'))
    {
        strptr++;
    }
    if (*strptr == '\0')
        return 0;
    if ((*strptr == '/') && (*(strptr + 1) == '/'))
        return 0;

    while ((*strptr != '\0') && (isspace(*strptr) == 0) && (*strptr != '/'))
    {
        *destptr = *strptr;
        strptr++;
        destptr++;
    }
    *destptr = '\0';
    return 1;
}

//The function gets an iteger and converts it to a binary string.
void convert_int_to_bin_string(int x, STR astring)
{
    int i, j, rem;
    STR temp;
    i = 0;
    while (i != 15)
    {
        rem = x % 2;
        x = x / 2;
        temp[i] = rem + '0';
        i++;
    }
    temp[15] = '\0';
    for (j = 0; j < i; j++)
    {
        astring[j] = temp[i - j - 1];
    } // for
    astring[15] = '\0';
}

//The function checks if the command is a label. if it is a label:
//returns 1 and puts the label name into dest. if not: returns 0.
int is_label_symbol(char str[], char dest[])
{
    if (str[0] != '(')
        return 0;
    else
    {
        int length = strlen(str), i;
        for (i = 1; i < length - 1; i++)
        {
            temp[i - 1] = str[i];
        }
        temp[i - 1] = '\0';
        strcpy(dest, temp);
        return 1;
    }
}

//The function checks if the command is an assignment to A/M/D. if it is:
//returns 1 and puts the destination name into dest, and the value into src.
//if not: returns 0.
int is_assign_command(STR str, STR dest, STR src)
{
    int length = strlen(str), i, j, flag = 0;
    for (i = 0; i < length; i++)
    {
        if (str[i] == '=')
        {
            flag = 1;
            break;
        }
    }
    if (flag == 0) //there is no '=' in the string.
        return 0;
    else //there is a '=' in the string.
    {
        for (j = 0; j <= i; j++)
        {
            dest[j] = str[j];
        }
        dest[j] = '\0';
        for (j = i + 1; j < length; j++)
        {
            src[j - i - 1] = str[j];
        }
        src[j] = '\0';
        return 1;
    }
}

//The function checks if the command is in the symbol table.
//If it is, returns 0, if it's not: adds it and returns 1.
int is_new_variable(STRARRY asmarr, char command[])
{
    int i = 0, flag = 0;
    while (strcmp(asmarr[i], "") != 0)
    {
        if (strcmp(asmarr[i], command) == 0)
        {
            flag = 1;
            return 0;
        }
        i++;
    }
    if (flag == 0)
    {
        strcpy(asmarr[i], command);
        variableCounter++;
        return 1;
    }
}

//The function checks if the command is a jump command.
// updates the jmp,dest,comp strings with the given command.
//If it is a jump command: returns 1, otherwise return 0.
int is_jmp_command(char acommand[], char command[])
{
    int i, j, len = strlen(acommand);
    STR temp;
    for (i = 0; i < len; i++)
        if (acommand[i] == ';')
            break;
    if (i == len)
        return 0;
    else
    {
        for (j = 0; j < i; j++) //temp gets what's before the ';'
            temp[j] = acommand[j];
        temp[j] = '\0';
        for (j = i; j < len; j++)//jmpstr gets the jump command
            jmpstr[j - i] = acommand[j];
        jmpstr[j - i] = '\0';
        if (is_assign_command(temp, deststr, compstr) == 1) //if there is assign before the ';'
        {
            return 1;
        }
        else //if its only comp part, without dest.
        {
            strcpy(compstr, temp);
            strcpy(deststr, "");
            return 1;
        }
    }
}

//The function gets a dictionary and codes, a source string and
//dest string. Puts the code of the source in the dest string
//using the given dictionary.
void encode(STRARRY dictarr, STRARRY codearr, STR src, STR dest)
{
    int i = 0;
    while (1)
    {
        if (strcmp(dictarr[i], src) == 0)
        {
            strcpy(dest, codearr[i]);
            return;
        }
        i++;
    }
}
